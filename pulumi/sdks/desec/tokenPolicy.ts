// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TokenPolicy extends pulumi.CustomResource {
    /**
     * Get an existing TokenPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TokenPolicyState, opts?: pulumi.CustomResourceOptions): TokenPolicy {
        return new TokenPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'desec:index/tokenPolicy:TokenPolicy';

    /**
     * Returns true if the given object is an instance of TokenPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TokenPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TokenPolicy.__pulumiType;
    }

    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly permWrite!: pulumi.Output<boolean>;
    public readonly subname!: pulumi.Output<string | undefined>;
    public readonly tokenId!: pulumi.Output<string>;
    public readonly tokenPolicyId!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a TokenPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TokenPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TokenPolicyArgs | TokenPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TokenPolicyState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["permWrite"] = state ? state.permWrite : undefined;
            resourceInputs["subname"] = state ? state.subname : undefined;
            resourceInputs["tokenId"] = state ? state.tokenId : undefined;
            resourceInputs["tokenPolicyId"] = state ? state.tokenPolicyId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as TokenPolicyArgs | undefined;
            if ((!args || args.permWrite === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permWrite'");
            }
            if ((!args || args.tokenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tokenId'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["permWrite"] = args ? args.permWrite : undefined;
            resourceInputs["subname"] = args ? args.subname : undefined;
            resourceInputs["tokenId"] = args ? args.tokenId : undefined;
            resourceInputs["tokenPolicyId"] = args ? args.tokenPolicyId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TokenPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TokenPolicy resources.
 */
export interface TokenPolicyState {
    domain?: pulumi.Input<string>;
    permWrite?: pulumi.Input<boolean>;
    subname?: pulumi.Input<string>;
    tokenId?: pulumi.Input<string>;
    tokenPolicyId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TokenPolicy resource.
 */
export interface TokenPolicyArgs {
    domain?: pulumi.Input<string>;
    permWrite: pulumi.Input<boolean>;
    subname?: pulumi.Input<string>;
    tokenId: pulumi.Input<string>;
    tokenPolicyId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
