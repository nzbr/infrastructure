// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RrsetArgs, RrsetState } from "./rrset";
export type Rrset = import("./rrset").Rrset;
export const Rrset: typeof import("./rrset").Rrset = null as any;
utilities.lazyLoad(exports, ["Rrset"], () => require("./rrset"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));

export { TokenPolicyArgs, TokenPolicyState } from "./tokenPolicy";
export type TokenPolicy = import("./tokenPolicy").TokenPolicy;
export const TokenPolicy: typeof import("./tokenPolicy").TokenPolicy = null as any;
utilities.lazyLoad(exports, ["TokenPolicy"], () => require("./tokenPolicy"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "desec:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "desec:index/rrset:Rrset":
                return new Rrset(name, <any>undefined, { urn })
            case "desec:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            case "desec:index/tokenPolicy:TokenPolicy":
                return new TokenPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("desec", "index/domain", _module)
pulumi.runtime.registerResourceModule("desec", "index/rrset", _module)
pulumi.runtime.registerResourceModule("desec", "index/token", _module)
pulumi.runtime.registerResourceModule("desec", "index/tokenPolicy", _module)
pulumi.runtime.registerResourcePackage("desec", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:desec") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
