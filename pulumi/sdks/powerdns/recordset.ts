// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Recordset extends pulumi.CustomResource {
    /**
     * Get an existing Recordset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecordsetState, opts?: pulumi.CustomResourceOptions): Recordset {
        return new Recordset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerdns:index/recordset:Recordset';

    /**
     * Returns true if the given object is an instance of Recordset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Recordset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Recordset.__pulumiType;
    }

    /**
     * Name for record set (e.g. "www.powerdns.com.")
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * All records in this record set.
     */
    public readonly records!: pulumi.Output<string[]>;
    /**
     * The id of the server.
     */
    public readonly serverId!: pulumi.Output<string>;
    /**
     * DNS TTL of the records, in seconds.
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * Type of this record (e.g. "A", "PTR", "MX").
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * ID of the zone this record set belongs to.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Recordset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecordsetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecordsetArgs | RecordsetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecordsetState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["records"] = state ? state.records : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as RecordsetArgs | undefined;
            if ((!args || args.records === undefined) && !opts.urn) {
                throw new Error("Missing required property 'records'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["records"] = args ? args.records : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Recordset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Recordset resources.
 */
export interface RecordsetState {
    /**
     * Name for record set (e.g. "www.powerdns.com.")
     */
    name?: pulumi.Input<string>;
    /**
     * All records in this record set.
     */
    records?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The id of the server.
     */
    serverId?: pulumi.Input<string>;
    /**
     * DNS TTL of the records, in seconds.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Type of this record (e.g. "A", "PTR", "MX").
     */
    type?: pulumi.Input<string>;
    /**
     * ID of the zone this record set belongs to.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Recordset resource.
 */
export interface RecordsetArgs {
    /**
     * Name for record set (e.g. "www.powerdns.com.")
     */
    name?: pulumi.Input<string>;
    /**
     * All records in this record set.
     */
    records: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The id of the server.
     */
    serverId: pulumi.Input<string>;
    /**
     * DNS TTL of the records, in seconds.
     */
    ttl: pulumi.Input<number>;
    /**
     * Type of this record (e.g. "A", "PTR", "MX").
     */
    type: pulumi.Input<string>;
    /**
     * ID of the zone this record set belongs to.
     */
    zoneId: pulumi.Input<string>;
}
